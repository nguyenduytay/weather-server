const config = require('../config/app-config');
const { getRef, sendFCMNotification, getFCMToken } = require('./firebase-service');

//bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ID c·ªßa interval th√¥ng b√°o ƒë·ªãnh k·ª≥
let periodicNotificationInterval = null;
//bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ th·ªùi gian g·ª≠i th√¥ng b√°o cu·ªëi c√πng
let lastNotificationTime = 0;

//h√†m g·ª≠i th√¥ng b√°o ƒë·ªãnh k·ª≥ theo c√†i ƒë·∫∑t
async function sendPeriodicNotification() {
    try {
        //l·∫•y c·∫•u h√¨nh th√¥ng b√°o
        const notificationConfigSnap = await getRef(config.firebasePaths.notification).once("value");
        const notificationConfig = notificationConfigSnap.val();

        //n·∫øu kh√¥ng c√≥ c·∫•u h√¨nh ho·∫∑c status=false th√¨ kh√¥ng th√¥ng b√°o
        if (!notificationConfig || notificationConfig.status !== true) {
            console.log("‚è∞ Kh√¥ng c√≥ th√¥ng b√°o ƒë·ªãnh k·ª≥ ho·∫∑c ƒë√£ t·∫Øt.");
            return;
        }

        //l·∫•y th·ªùi gian hi·ªán t·∫°i t√≠nh b·∫±ng mili gi√¢y
        const currentTime = Date.now();
        // t√≠nh kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn th√¥ng b√°o
        const notificationInterval = (notificationConfig.time || config.notification.defaultIntervalMinutes) * 60 * 1000; // chuy·ªÉn ƒë·ªïi ph√∫t th√†nh mili gi√¢y

        //ki·ªÉm tr·∫£ xem th·ªùi gian hi·ªán t·∫°i c√≥ ph·∫£i l√† th·ªùi ƒëi·ªÉm ti·∫øp theo c·ªßa th√¥ng b√°o kh√¥ng
        if (currentTime - lastNotificationTime < notificationInterval) {
            // Th√™m d√≤ng n√†y ƒë·ªÉ ghi log th·ªùi gian c√≤n l·∫°i
            const remainingMinutes = Math.ceil((notificationInterval - (currentTime - lastNotificationTime)) / 60000);
            console.log(`‚è∞ C√≤n ${remainingMinutes} ph√∫t n·ªØa ƒë·∫øn l·∫ßn th√¥ng b√°o ti·∫øp theo`);
            return;
        }

        //l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt hi·ªán t·∫°i
        const weatherSnap = await getRef(config.firebasePaths.weatherData).once("value");
        const weatherData = weatherSnap.val();

        if (!weatherData) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt.");
            return;
        }
        //danh s√°ch th√¥ng b√°o s·∫Ω g·ª≠i 
        const messages = [];
        // Ki·ªÉm tra v√† th√™m th√¥ng b√°o t∆∞∆°ng ·ª©ng v·ªõi t·ª´ng lo·∫°i d·ªØ li·ªáu n·∫øu ƒë∆∞·ª£c b·∫≠t
        if (notificationConfig.temp === true) {
            messages.push(`üå°Ô∏è Nhi·ªát ƒë·ªô hi·ªán t·∫°i: ${weatherData.temperature}¬∞C`);
        }

        if (notificationConfig.humidityAir === true) {
            messages.push(`üíß ƒê·ªô ·∫©m kh√¥ng kh√≠: ${weatherData.humidity}%`);
        }

        if (notificationConfig.humidityLand === true) {
            messages.push(`üå± ƒê·ªô ·∫©m ƒë·∫•t: ${weatherData.humidityLand}%`);
        }

        // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√¥ng b√°o
        if (messages.length === 0) {
            console.log("‚ö†Ô∏è Kh√¥ng c√≥ lo·∫°i d·ªØ li·ªáu n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ th√¥ng b√°o");
            return;
        }

        // G·ª≠i th√¥ng b√°o n·∫øu c√≥ FCM token
        const token = getFCMToken();
        const success = await sendFCMNotification(
            token,
            "üìä C·∫≠p nh·∫≠t th√¥ng s·ªë m√¥i tr∆∞·ªùng",
            messages.join("\n")
        );

        if (success) {
            // C·∫≠p nh·∫≠t th·ªùi gian g·ª≠i th√¥ng b√°o cu·ªëi c√πng
            lastNotificationTime = currentTime;
        }

    } catch (error) {
        console.error("‚ùå L·ªói khi g·ª≠i th√¥ng b√°o th·ªùi ti·∫øt ƒë·ªãnh k·ª≥:", error);
    }
}

/**
 * H√†m b·∫Øt ƒë·∫ßu g·ª≠i th√¥ng b√°o ƒë·ªãnh k·ª≥
 * @param {number} checkIntervalMinutes - Kho·∫£ng th·ªùi gian ki·ªÉm tra (ph√∫t)
 */
function startPeriodicNotification(checkIntervalMinutes = config.notification.checkIntervalMinutes) {
    // D·ª´ng interval c≈© n·∫øu ƒëang ch·∫°y
    stopPeriodicNotification();

    // Ch·∫°y ki·ªÉm tra m·ªói ph√∫t (ho·∫∑c theo kho·∫£ng th·ªùi gian ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh)
    periodicNotificationInterval = setInterval(sendPeriodicNotification, checkIntervalMinutes * 60 * 1000);

    console.log(`üìä ƒê√£ b·∫Øt ƒë·∫ßu h·ªá th·ªëng th√¥ng b√°o th·ªùi ti·∫øt ƒë·ªãnh k·ª≥ (ki·ªÉm tra m·ªói ${checkIntervalMinutes} ph√∫t)`);

    // Ki·ªÉm tra ngay l·∫≠p t·ª©c l·∫ßn ƒë·∫ßu
    sendPeriodicNotification();

    return true;
}

/**
 * H√†m d·ª´ng g·ª≠i th√¥ng b√°o ƒë·ªãnh k·ª≥
 */
function stopPeriodicNotification() {
    if (periodicNotificationInterval) {
        clearInterval(periodicNotificationInterval);
        periodicNotificationInterval = null;
        console.log("üìä ƒê√£ d·ª´ng h·ªá th·ªëng th√¥ng b√°o th·ªùi ti·∫øt ƒë·ªãnh k·ª≥");
        return true;
    }
    return false;
}

module.exports = {
    sendPeriodicNotification,
    startPeriodicNotification,
    stopPeriodicNotification
};