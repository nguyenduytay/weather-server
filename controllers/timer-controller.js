const { sendFCMNotification, getFCMToken, getWateringRef } = require('../services/firebase-service');
const { sendMQTTMessage, isConnected } = require('../services/mqtt-service');
const { isScheduledDay, formatTimeStr, convertToMinutes, calculateNextChangeTime } = require('../utils/time-utils');
const config = require('../config/app-config');


// Bi·∫øn theo d√µi tr·∫°ng th√°i h·∫πn gi·ªù
let isInWateringTime = false;
let scheduledTimerCheck = null; // Bi·∫øn l∆∞u tr·ªØ timeout ID
let wateringRef = getWateringRef();
/**
 * H√†m ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i t∆∞·ªõi theo th·ªùi gian ƒë√£ h·∫πn
 * @param {Object} watering - C·∫•u h√¨nh t∆∞·ªõi n∆∞·ªõc
 */
async function checkWateringTimer(watering) {
    // Ki·ªÉm tra c·∫•u h√¨nh th·ªùi gian v√† tr·∫°ng th√°i timer
    if (!watering || watering.timer_start === undefined || watering.timer_end === undefined || watering.status_timer !== 1) {
        console.log("Kh√¥ng th·ªèa ƒëi·ªÅu ki·ªán c∆° b·∫£n ƒë·ªÉ t∆∞·ªõi theo l·ªãch");
        return;
    }

    try {
        // Ki·ªÉm tra xem h√¥m nay c√≥ thu·ªôc l·ªãch h·∫πn t∆∞·ªõi kh√¥ng
        if (!isScheduledDay(watering.repeat)) {
            console.log("H√¥m nay kh√¥ng thu·ªôc l·ªãch t∆∞·ªõi:", watering.repeat);

            // N·∫øu h√¥m nay kh√¥ng thu·ªôc l·ªãch h·∫πn t∆∞·ªõi v√† h·ªá th·ªëng ƒëang b·∫≠t
            if (watering.status === 1 && isInWateringTime) {
                // T·∫Øt h·ªá th·ªëng t∆∞·ªõi qua MQTT
                isInWateringTime = false;

                // G·ª≠i l·ªánh T·∫ÆT qua MQTT
                const mqttSuccess = await sendMQTTMessage(config.mqtt.topics.wateringStatus, '0');

                if (mqttSuccess) {
                    console.log("üì§ ƒê√£ g·ª≠i l·ªánh T·∫ÆT m√°y b∆°m qua MQTT (kh√¥ng thu·ªôc l·ªãch t∆∞·ªõi)");
                } else {
                    // N·∫øu MQTT th·∫•t b·∫°i, c·∫≠p nh·∫≠t qua Firebase
                    const wateringRef = firebaseService.getWateringRef();
                    await wateringRef.update({ status: 0 });
                    console.log("‚ö†Ô∏è MQTT th·∫•t b·∫°i, ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i qua Firebase");
                }

                // G·ª≠i th√¥ng b√°o t·∫Øt h·ªá th·ªëng
                const token = getFCMToken();
                await sendFCMNotification(
                    token,
                    "‚è∞ C·∫≠p nh·∫≠t h·ªá th·ªëng t∆∞·ªõi theo l·ªãch",
                    "‚è∞ H·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông T·∫ÆT do h√¥m nay kh√¥ng thu·ªôc l·ªãch t∆∞·ªõi"
                );
            }
            return; // Kh√¥ng ti·∫øp t·ª•c ki·ªÉm tra th·ªùi gian
        }

        // L·∫•y th·ªùi gian hi·ªán t·∫°i v√† chuy·ªÉn ƒë·ªïi th√†nh s·ªë ph√∫t
        const now = new Date();
        console.log(`‚è∞ Th·ªùi gian ki·ªÉm tra hi·ªán t·∫°i: ${now.toLocaleString('vi-VN')}`);
        const currentHours = now.getHours();
        const currentMinutes = now.getMinutes();
        const currentInMinutes = currentHours * 60 + currentMinutes;

        // X·ª≠ l√Ω timer_start v√† timer_end d·ª±a tr√™n ki·ªÉu d·ªØ li·ªáu
        const startInMinutes = convertToMinutes(watering.timer_start);
        const endInMinutes = convertToMinutes(watering.timer_end);

        console.log(`‚è∞ Ki·ªÉm tra th·ªùi gian t∆∞·ªõi: hi·ªán t·∫°i = ${currentInMinutes} ph√∫t (${formatTimeStr(currentInMinutes)}), b·∫Øt ƒë·∫ßu = ${startInMinutes} ph√∫t (${formatTimeStr(startInMinutes)}), k·∫øt th√∫c = ${endInMinutes} ph√∫t (${formatTimeStr(endInMinutes)})`);

        // Ki·ªÉm tra xem th·ªùi gian hi·ªán t·∫°i c√≥ n·∫±m trong kho·∫£ng th·ªùi gian t∆∞·ªõi hay kh√¥ng
        const shouldBeWatering = currentInMinutes >= startInMinutes && currentInMinutes < endInMinutes;

        // Ch·ªâ x·ª≠ l√Ω khi tr·∫°ng th√°i thay ƒë·ªïi so v·ªõi l·∫ßn ki·ªÉm tra tr∆∞·ªõc
        if (shouldBeWatering !== isInWateringTime) {
            console.log(`üîÑ Tr·∫°ng th√°i t∆∞·ªõi thay ƒë·ªïi: ${isInWateringTime} -> ${shouldBeWatering}`);

            // C·∫≠p nh·∫≠t bi·∫øn tr·∫°ng th√°i
            isInWateringTime = shouldBeWatering;

            // X√°c ƒë·ªãnh tr·∫°ng th√°i v√† th√¥ng b√°o d·ª±a v√†o k·∫øt qu·∫£ ki·ªÉm tra
            let newStatus = shouldBeWatering ? 1 : 0;  // 1: B·∫¨T, 0: T·∫ÆT

            const startTimeStr = formatTimeStr(startInMinutes);
            const endTimeStr = formatTimeStr(endInMinutes);

            // L·∫•y th√¥ng tin v·ªÅ l·ªãch theo th·ª© ƒë·ªÉ hi·ªÉn th·ªã
            const scheduleInfo = watering.repeat
                ? ` theo l·ªãch (${watering.repeat || "H√†ng ng√†y"})`
                : " h√†ng ng√†y";

            let message = shouldBeWatering
                ? `‚è∞ H·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông B·∫¨T${scheduleInfo} (${startTimeStr} - ${endTimeStr})`
                : `‚è∞ H·ªá th·ªëng t∆∞·ªõi t·ª± ƒë·ªông T·∫ÆT (k·∫øt th√∫c ${endTimeStr})`;

            console.log(message);

            // G·ª≠i tr·∫°ng th√°i qua MQTT
            const mqttSuccess = await sendMQTTMessage(config.mqtt.topics.wateringStatus, newStatus.toString());

            if (mqttSuccess) {
                console.log(`üì§ ƒê√£ g·ª≠i l·ªánh ${newStatus === 1 ? 'B·∫¨T' : 'T·∫ÆT'} m√°y b∆°m qua MQTT`);

                // C·∫≠p nh·∫≠t Firebase ƒë·ªÉ UI ƒë·ªìng b·ªô
                await wateringRef.update({ status: newStatus });
            } else {
                // N·∫øu MQTT th·∫•t b·∫°i, c·∫≠p nh·∫≠t qua Firebase
                await wateringRef.update({ status: newStatus });
                console.log("‚ö†Ô∏è MQTT th·∫•t b·∫°i, ƒë√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i qua Firebase");
            }

            // G·ª≠i th√¥ng b√°o n·∫øu c√≥ FCM token
            const token = getFCMToken();
            await sendFCMNotification(token, "‚è∞ C·∫≠p nh·∫≠t h·ªá th·ªëng t∆∞·ªõi theo l·ªãch", message);
        }

        // T√≠nh to√°n th·ªùi gian cho l·∫ßn thay ƒë·ªïi tr·∫°ng th√°i ti·∫øp theo
        scheduleNextTimerCheck(watering);

    } catch (error) {
        console.error("‚ùå L·ªói khi x·ª≠ l√Ω timer:", error);
        console.log("D·ªØ li·ªáu timer:", {
            timer_start: watering.timer_start,
            timer_end: watering.timer_end,
            ki·ªÉu_d·ªØ_li·ªáu_start: typeof watering.timer_start,
            ki·ªÉu_d·ªØ_li·ªáu_end: typeof watering.timer_end
        });
    }
}

/**
 * H√†m t√≠nh to√°n v√† l·∫≠p l·ªãch cho l·∫ßn thay ƒë·ªïi tr·∫°ng th√°i ti·∫øp theo
 * @param {Object} watering - C·∫•u h√¨nh t∆∞·ªõi n∆∞·ªõc
 */
function scheduleNextTimerCheck(watering) {
    // H·ªßy b·ªè l·ªãch ki·ªÉm tra c≈© n·∫øu c√≥
    if (scheduledTimerCheck) {
        clearTimeout(scheduledTimerCheck);
    }

    try {
        // L·∫•y th·ªùi gian hi·ªán t·∫°i
        const now = new Date();
        console.log(`‚è∞ Th·ªùi gian l·∫≠p l·ªãch hi·ªán t·∫°i: ${now.toLocaleString('vi-VN')}`);
        const currentHours = now.getHours();
        const currentMinutes = now.getMinutes();
        const currentSeconds = now.getSeconds();
        const currentInMinutes = currentHours * 60 + currentMinutes;

        // X·ª≠ l√Ω timer_start v√† timer_end
        const startInMinutes = convertToMinutes(watering.timer_start);
        const endInMinutes = convertToMinutes(watering.timer_end);

        // T√≠nh th·ªùi gian ƒë·∫øn l·∫ßn thay ƒë·ªïi tr·∫°ng th√°i ti·∫øp theo
        const { nextChangeInMinutes, millisToNextChange, nextChangeDescription } =
            calculateNextChangeTime(currentInMinutes, currentSeconds, startInMinutes, endInMinutes);

        // N·∫øu kh√¥ng c√≥ thay ƒë·ªïi ti·∫øp theo trong ng√†y
        if (!nextChangeInMinutes) {
            console.log("‚è∞ ƒê√£ h·∫øt th·ªùi gian t∆∞·ªõi h√¥m nay, s·∫Ω ki·ªÉm tra l·∫°i sau 1 gi·ªù");

            // Thi·∫øt l·∫≠p ki·ªÉm tra l·∫°i sau 1 gi·ªù
            scheduledTimerCheck = setTimeout(async () => {
                const latestWateringSnap = await wateringRef.once("value");
                const latestWatering = latestWateringSnap.val();
                if (latestWatering && latestWatering.status_timer === 1) {
                    await checkWateringTimer(latestWatering);
                }
            }, 60 * 60 * 1000); // 60 ph√∫t = 1 gi·ªù

            return; // Tho√°t kh·ªèi h√†m, kh√¥ng th·ª±c hi·ªán ph·∫ßn c√≤n l·∫°i
        }

        const nextChangeTime = new Date(now.getTime() + millisToNextChange);
        console.log(`‚è∞ ƒê√£ l·∫≠p l·ªãch ${nextChangeDescription} v√†o ${nextChangeTime.getHours()}:${nextChangeTime.getMinutes().toString().padStart(2, '0')} (sau ${Math.round(millisToNextChange / 60000)} ph√∫t)`);

        // Thi·∫øt l·∫≠p timeout cho l·∫ßn thay ƒë·ªïi ti·∫øp theo
        scheduledTimerCheck = setTimeout(async () => {
            // L·∫•y c·∫•u h√¨nh t∆∞·ªõi n∆∞·ªõc m·ªõi nh·∫•t
            const wateringSnap = await wateringRef.once("value");
            const currentWatering = wateringSnap.val();

            // Ki·ªÉm tra l·∫°i to√†n b·ªô ƒëi·ªÅu ki·ªán
            if (currentWatering && currentWatering.status_timer === 1) {
                await checkWateringTimer(currentWatering);
            } else {
                // N·∫øu ch·∫ø ƒë·ªô h·∫πn gi·ªù ƒë√£ b·ªã t·∫Øt, ki·ªÉm tra l·∫°i sau 5 ph√∫t
                console.log("‚è∞ Ch·∫ø ƒë·ªô h·∫πn gi·ªù ƒë√£ b·ªã t·∫Øt, s·∫Ω ki·ªÉm tra l·∫°i sau 5 ph√∫t");
                scheduledTimerCheck = setTimeout(() => scheduleNextTimerCheck(currentWatering), 5 * 60 * 1000);
            }
        }, millisToNextChange);

    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫≠p l·ªãch timer:", error);
        // N·∫øu c√≥ l·ªói, th·ª≠ l·∫°i sau 1 ph√∫t
        scheduledTimerCheck = setTimeout(() => scheduleNextTimerCheck(watering), 60 * 1000);
    }
}

/**
 * H√†m thi·∫øt l·∫≠p h·ªá th·ªëng ki·ªÉm tra th·ªùi gian t∆∞·ªõi t·ª± ƒë·ªông
 */
async function setupTimerChecker() {
    try {
        // L·∫•y c·∫•u h√¨nh t∆∞·ªõi n∆∞·ªõc hi·ªán t·∫°i
        const wateringSnap = await wateringRef.once("value");
        const watering = wateringSnap.val();

        // Ki·ªÉm tra ngay l·∫ßn ƒë·∫ßu v√† l·∫≠p l·ªãch cho l·∫ßn ti·∫øp theo
        if (watering && watering.status_timer === 1) {
            await checkWateringTimer(watering);
        } else {
            // N·∫øu ch·∫ø ƒë·ªô h·∫πn gi·ªù kh√¥ng ƒë∆∞·ª£c b·∫≠t, ki·ªÉm tra l·∫°i sau m·ªói 5 ph√∫t
            console.log("‚è∞ Ch·∫ø ƒë·ªô h·∫πn gi·ªù ch∆∞a ƒë∆∞·ª£c b·∫≠t, s·∫Ω ki·ªÉm tra l·∫°i sau 5 ph√∫t");
            scheduledTimerCheck = setTimeout(async () => {
                const latestWateringSnap = await wateringRef.once("value");
                const latestWatering = latestWateringSnap.val();
                if (latestWatering && latestWatering.status_timer === 1) {
                    await checkWateringTimer(latestWatering);
                } else {
                    scheduleNextTimerCheck(latestWatering);
                }
            }, 5 * 60 * 1000);
        }

        console.log("‚è≥ ƒê√£ thi·∫øt l·∫≠p h·ªá th·ªëng h·∫πn gi·ªù t∆∞·ªõi t·ª± ƒë·ªông ch√≠nh x√°c");
        return true;
    } catch (error) {
        console.error("‚ùå L·ªói khi thi·∫øt l·∫≠p h·ªá th·ªëng h·∫πn gi·ªù:", error);
        return false;
    }
}

module.exports = {
    checkWateringTimer,
    scheduleNextTimerCheck,
    setupTimerChecker
};