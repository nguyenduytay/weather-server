require('dotenv').config();
process.env.TZ = 'Asia/Ho_Chi_Minh';
console.log(`‚è∞ Thi·∫øt l·∫≠p m√∫i gi·ªù: ${process.env.TZ}`);
console.log(`‚è∞ Th·ªùi gian hi·ªán t·∫°i: ${new Date().toLocaleString('vi-VN')}`);

const express = require("express");
const https = require("https");
const app = express();

// Kh·ªüi t·∫°o Firebase TR∆Ø·ªöC TI√äN
const { initFirebase } = require('./services/firebase-service');
initFirebase();

// Import c√°c d·ªãch v·ª•
const { connectMQTT, setupMQTTCleanup } = require('./services/mqtt-service');
const { startPeriodicNotification } = require('./services/notification-service');

// Import c√°c controller
const { setupWateringListeners } = require('./controllers/watering-controller');
const { setupTimerChecker } = require('./controllers/timer-controller');
const { setupWeatherListeners } = require('./controllers/weather-controller');
const { setupWarningListeners } = require('./controllers/warning-controller');
const { startAIController } = require('./controllers/ai-controller');

// Health check route
app.get('/', (req, res) => {
    res.status(200).json({
        status: 'running',
        message: 'Smart Watering System Server is running üöÄ',
        timestamp: new Date().toLocaleString('vi-VN'),
        services: {
            firebase: '‚úÖ',
            mqtt: '‚úÖ',
            ai: '‚úÖ'
        }
    });
});

// Kh·ªüi t·∫°o t·∫•t c·∫£ c√°c d·ªãch v·ª•
async function initializeApp() {
    try {
        console.log("üîß B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o c√°c d·ªãch v·ª•...");

        // 1. K·∫øt n·ªëi MQTT tr∆∞·ªõc ti√™n (quan tr·ªçng cho AI)
        console.log("üì° ƒêang k·∫øt n·ªëi MQTT...");
        await connectMQTT();
        console.log("‚úÖ MQTT ƒë√£ k·∫øt n·ªëi");

        // 2. Kh·ªüi t·∫°o c√°c listener Firebase
        console.log("üî• ƒêang thi·∫øt l·∫≠p Firebase listeners...");
        await setupWeatherListeners();
        await setupWarningListeners();
        await setupWateringListeners();
        console.log("‚úÖ Firebase listeners ƒë√£ s·∫µn s√†ng");

        // 3. Kh·ªüi t·∫°o h·ªá th·ªëng timer
        console.log("‚è∞ ƒêang thi·∫øt l·∫≠p timer checker...");
        await setupTimerChecker();
        console.log("‚úÖ Timer checker ƒë√£ kh·ªüi ƒë·ªông");

        // 4. Kh·ªüi t·∫°o th√¥ng b√°o ƒë·ªãnh k·ª≥
        console.log("üì± ƒêang thi·∫øt l·∫≠p notification service...");
        await startPeriodicNotification();
        console.log("‚úÖ Notification service ƒë√£ kh·ªüi ƒë·ªông");

        // 5. Cu·ªëi c√πng kh·ªüi ƒë·ªông AI Controller
        console.log("ü§ñ ƒêang kh·ªüi ƒë·ªông AI Controller...");
        await startAIController();
        console.log("‚úÖ AI Controller ƒë√£ kh·ªüi ƒë·ªông");

        console.log("üéâ T·∫§T C·∫¢ D·ªäCH V·ª§ ƒê√É KH·ªûI ƒê·ªòNG TH√ÄNH C√îNG!");

    } catch (error) {
        console.error("‚ùå L·ªói khi kh·ªüi t·∫°o ·ª©ng d·ª•ng:", error);

        // Log chi ti·∫øt l·ªói ƒë·ªÉ debug
        if (error.stack) {
            console.error("üìã Stack trace:", error.stack);
        }

        // Kh√¥ng exit, ti·∫øp t·ª•c ch·∫°y c√°c d·ªãch v·ª• kh√°c
        console.log("‚ö†Ô∏è M·ªôt s·ªë d·ªãch v·ª• c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông ƒë·∫ßy ƒë·ªß");
    }
}

// T·ª± ping ƒë·ªÉ tr√°nh Render ng·ªß  
function setupSelfPing() {
    const SERVER_URL = process.env.SERVER_URL ||
        `https://${process.env.RENDER_EXTERNAL_HOSTNAME || 'localhost:' + (process.env.PORT || 3000)}`;

    console.log(`üîÑ Thi·∫øt l·∫≠p t·ª± ping ƒë·∫øn: ${SERVER_URL}`);

    // Ping m·ªói 14 ph√∫t
    const PING_INTERVAL = 14 * 60 * 1000;

    setInterval(() => {
        https.get(SERVER_URL, (res) => {
            const timestamp = new Date().toLocaleString('vi-VN');
            console.log(`‚úÖ Self-ping th√†nh c√¥ng: ${res.statusCode} t·∫°i ${timestamp}`);
        }).on('error', (err) => {
            const timestamp = new Date().toLocaleString('vi-VN');
            console.error(`‚ùå Self-ping th·∫•t b·∫°i t·∫°i ${timestamp}: ${err.message}`);
        });
    }, PING_INTERVAL);

    console.log(`‚è∞ ƒê√£ thi·∫øt l·∫≠p t·ª± ping m·ªói ${PING_INTERVAL / 60000} ph√∫t`);
}

// Kh·ªüi ƒë·ªông server
const PORT = process.env.PORT || 3000;
const server = app.listen(PORT, async () => {
    console.log(`üöÄ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
    console.log(`üåê URL: http://localhost:${PORT}`);

    // Delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o server ƒë√£ s·∫µn s√†ng
    setTimeout(async () => {
        await initializeApp();

        // Thi·∫øt l·∫≠p cleanup v√† self-ping
        setupMQTTCleanup();
        setupSelfPing();

        console.log("üéØ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông!");
    }, 1000);
});

// X·ª≠ l√Ω ƒë√≥ng server an to√†n
process.on('SIGTERM', () => {
    console.log('üõë SIGTERM nh·∫≠n ƒë∆∞·ª£c. ƒêang ƒë√≥ng server...');
    server.close(() => {
        console.log('‚úÖ Server ƒë√£ ƒë√≥ng an to√†n');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('üõë SIGINT nh·∫≠n ƒë∆∞·ª£c. ƒêang ƒë√≥ng server...');
    server.close(() => {
        console.log('‚úÖ Server ƒë√£ ƒë√≥ng an to√†n');
        process.exit(0);
    });
});

// X·ª≠ l√Ω l·ªói Promise kh√¥ng ƒë∆∞·ª£c catch
process.on('unhandledRejection', (error) => {
    console.error('‚ùå L·ªói Promise kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω:', error);
    // Kh√¥ng exit ƒë·ªÉ tr√°nh crash server
});

// X·ª≠ l√Ω l·ªói exception kh√¥ng ƒë∆∞·ª£c catch  
process.on('uncaughtException', (error) => {
    console.error('‚ùå L·ªói Exception kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω:', error);
    // Log nh∆∞ng kh√¥ng exit ngay, cho ph√©p cleanup
});